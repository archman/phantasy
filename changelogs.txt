Version 2.1.2
-------------
2021-10-14

  - FIX: test_phantasy command.
  - FIX: Set False wait for put and turn on automonitor by default.
  - FIX: Return a scalar from current_setting() and convert().
    - ndarray cannot be pickled.
  - REF: Support readback for get_settings().
  - REF: Change default of CaField.wait value to False.

Version 2.1.1
-------------
2021-09-10

  - Support change init beam condition of FLAME VA.
  - Support configure ModelFlame thru init_beam_conf argument.
  - Fix layout tests.

Version 2.1.0
-------------
2021-08-11

  - Support misalignment data management, abstracted as 'alignment' attribute.
  - Support generate online FLAME with misalignment data.
  - Support layout drawing for more element types.
  - Update xlsx lattice file parser for layout generation.

Version 2.0.5
-------------
2021-06-25

 - Quickfix version
   - REF: Treat DumpElement, TargetElement, WedgeElement as VD in VA (data put)

Version 2.0.4
-------------
2021-06-25

 - Working in progress: support parsing ES lattice xlsx file.
   - MNT: Treat DumpElement, TargetElement, WedgeElement as VD in VA.
   - REF: Add missed drift sections for VD of non-zero length.

Version 2.0.3
-------------
2021-06-24

 - Working in progress: support parsing ES lattice xlsx file.
   - REF: Add support to ELDElement.
   - REF: Support ELDElement when read layout and build flame lattice.
   - MNT: Add support to config length by name/type for QUAD.
   - ENH: Add support to parse ELD (energy loss detector) device.

Version 2.0.2
-------------
2021-06-22

 - Working in progress: support parsing ES lattice xlsx file.
   - REF: Add new element types to support ES lattice file.
   - REF: Update device definition generation rules for FLAME VA.
   - REF: Update to support ES lattice file.
   - WIP: To support ES lattice file.
   - REF: Update channel generation rules to support ES lattice file.
   - MNT: Add fields config for OctElement (octopole magnet).

Version 2.0.1
-------------
2021-06-02

 - Fix broken tests
 - Clean up

Version 2.0.0
-------------
2021-06-02

 - Support parsing FRIB xlsx lattice file version 20210318.
 - Add rate/noise controls for FLAME VA.
 - Support new UNICORN API.
 - Drop support for Python 2.
 - Other details:
   - REF: Skip line starts with '#' for reading QUAD polarity data.
   - REF: Name physics field name as engineering field _phy if same.
   - REF: Exlcude FC,EMS,PM,ND,IC,HMR from is_diag().
   - REF: Generate PWRSTS and BIAS_VOLT channels for PM,IC,ND and HMR.
   - REF: Add BIAS VOLT and PWRSTS for PM,IC,ND,HMR,FC.
   - REF: Update naming convention for BCM:AVGPK.
   - REF: Do not run cbs after changing am.
   - BUG: Align the physics and engineering fields after filtering.
   - ENH: Support to generate LOCK_STATUS and INTERLOCK_STATUS PVs for CAV.
   - ENH: Run callbacks after adding.
   - ENH: Implement new callback logic for CaField.
   - REF: Search field_of_interest by element name (0) and element type (1).
   - REF: Adjustment per CaElement.convert() API changes.
   - MNT: Update install depends.
   - MNT: Update makefile for testing.
   - BUG: Fix constructing CaElement with None u_policy arg.
   - BUG: Handle for machine configuration w/o 'unicorn_file'.
   - API: Support new unicorn data format.
   - REF: Rename nautils mitem to Launch Physics Apps.
   - MNT: Update depends.
   - REF: Add fields for CAV.
   - REF: Add support to generate PVs for power status.
   - ENH: Applied ensure put policy for orm measurement.
   - ENH: Add function get_random_name().
   - REF: Pull field names from configs for FC,BCM,ND,IC,HMR elements.
   - MNT: Update the field names configs for FC,BCM,ND,IC,HMR elements.
   - BUG: Change GRAD to B2, after renaming physics field of quad gradient.

Version 1.15.1
--------------
2020-07-21

- MNT: Bump up version to 1.15.1.
- REF: Loading dynamic ENG/PHY fields from configuration file.
- ENH: Control element field mapping with .toml file.
- REF: Name DCH[V] with number (1,2,3) for the SOLCOR device.
- ENH: Add method to get QUAD focusing polarity: get_focusing_polarity().

Version 1.15.0
--------------
2020-06-07

- MNT: Bump up version to 1.15.0.
- ENH: Add support to equal test for all elements, include Layout.
- MNT: Update log message.
- ENH: Add MarkerElement and SourceElement.
- REF: Add 'family' keyword argument to build_element().
- FIX: API updates regarding the changes of PV read policy.
- REF: Add 'auto_monitor' as keyword argument of MachinePortal class.
- REF: Improve the PV value reading routine.
- BUG: Add get_auto_monitor() for PVElement.
- REF: Try to extract D### as spos when building element from PVs.
- ENH: Add method to return all loaded lattice as one.
- REF: Implement '+' of two Lattice objects.
- FIX: String format of log message.
- REF: Update __str__ of Lattice.
- FIX: Lattice config,layout,settings file init issue.
- REF: Add 'search_all' option to get_elements() to search in all loaded lattices.
- REF: Fix --start[--end] element options for building FLAME settings.
- MNT: Change log messages regarding diag devices to DEBUG level.

!!This release is a rollback release from 1.14.0 (2020-04-15), in which there are VA issues.
These are the dropped commits:
- REF: Add support of --pv-suffix argument to FLAME VA.
- ENH: Add --pv-suffix to flame-vastart cmd to customize noise/rate PVs.
- ENH: Add --rep-rate and --noise arguments to flame-vastart cmd.
- ENH: Add support to initial VA with noise level.
- ENH: Add channel to control the reprate of VA.
- WIP: Refactor FLAME VA to be consistent with high-level architecture.
- WIP: Fix channel prefix issue with info PVs.
- REF: Refactor the flame va start up logic w.r.t. the new design.
- WIP: Build virtual accelerator from high-level lattice.

Version 1.13.0
--------------
2020-01-30

- Implement ensure_put() function for setting element field value.
- Disable PV auto subscription, only activate when needed, which will
  significantly improve the application performance.
- Create function build_element() to build CaElement object from generic
  PV names
- Implement methods/functions to handle lattice/element field settings.
- Update docstrings.
- Update unittests.
- Fix Python 3 incompatibilities.
- Fix bugs.

Version 1.12.1
--------------
2019-09-05

- Extend Element* classes to support drawing
- Implement layout drawing feature

Version 1.12.0
--------------
2019-07-12

- ENH: Add routine for wire-scanner operating and data processing.
- ENH: Only save settings when filepath is defined.
- ENH: Add support to send message to log queue.
- ENH: Add module template for device processors.
- ENH: Add module to handle slow monitors.
- ENH: Add support to slow devices regarding diagnostics.
- MNT: Apply ISO-8601 format to datetime timestamps in logmsg.
- BUG: Fix typo.
- REF: Update logging messages display
- ENH: Add suport for device alignment errors for FLAME model.
- ENH: Add rule to build PV for BPM energy field, only for VA.
- REF: Add support to buildchannels_pspv when feeding empty pspvconfig file.
- REF: Update log message regarding lattice loading.
- REF: Update log msg for unicorn policy.
- MNT: Add style.css into package.
- ENH: Add HTML repr of Lattice object for Jupyter-notebook.
- ENH: Fix repr of MachinePortal object.
- ENH: Add stylesheet for lattice html repr.
- MNT: Suppress warning msg from package channelfinder and scan.

Version 1.11.1
--------------
2019-06-19

- Add more support to the ReA xlsx lattice file.
- Add support ov VDElement and FCElement (mimic PM) to FLAME VA.
- Refactor the functions for temp dir/file creation, sort out the temp
  data dir/file with datetime rather than random strings.
- Bugfix when Lattice.sync_settings() from 'model' to 'control', cavity phase
  is always zero.
- Enhanced the feature of get settings from snp file for dynamic field settings.
- Kick off the work to replace unittests under pytest framework.
- Add more unittests.

Version 1.11.0
--------------
2019-06-05

- Support ReA xlsx lattice file, layout, VA.

Version 1.10.2
--------------
2019-05-20

- Maintenance:
  - Split phantasy/apps into a separate repo: 'phantasy-apps'.
  - Fix requirements.

- Bugfixes:
  - [3b188010] Prefix PV with defined string if re.match returns None.
  - [cca2e6ef] Return None if current_setting fails to return a value.

- Improvements:
  - [4e106414] Add new user-defined exception classes.
  - [089781c8] Return put status from ensure_put().
  - [70f22bef] Make 'ensure_put()' return after 'timeout' sec.

Version 1.10.1
--------------
2019-04-05

- Correlation Visualizer:
  - Add progressbar for scan routine.

- Allison Scanner App:
  - Initial working directory.

- PHANTASY core:
  - Add missing icon of Device Viewer app for launcher.

Version 1.10.0
--------------
2019-04-04

- PHANTASY core:
  - Add save_all_settings() as a new recipe to capture device settings.
  - Optimize the import clauses.
  - Rename BCM fields I1 --> AVG, Ip --> TYP.
  - Add new element types: ND and IC, and corresponding layout types.
  - Update xlsx parser to support ND and IC devices.
  - Add --mpl-style argument for all GUI apps to apply dataviz style.
  - Add menu launcher for Device Viewer app.
  - Other fixes and enhancements.

- App Launcher:
  - Right-click to choose the start up approaches for launching apps.
  - Add a new column to indicate as the category, 'limited' or 'public'.
  - Add 'Device Viewer' app into default app configuration.
  - Update UI with FRIB logo.

- Correlation Visualizer:
  - Fix issue about sometimes showing extra monitor details not correctly.
  - Add option to auto show extra monitor or not.
  - Add field column in the extra monitor viewer.
  - Support multiple elements selection.
  - Extend data save feature, add more keys
  - Support save scan task into JSON file and restore by loading the file.
  - Support correlation visulization between any two selected elements.
  - Update dataviz style and UI.
  - Other fixes.

- [NEW] Device Viewer:
  - Support viz any PV values in bar plot.
  - Support DAQ configuration by setting rate, and viz rate.
  - Support show D-number/element name/id as x-axis data.
  - Support save data, settings, and figure into files.

- Trajectory Viewer:
  - Add tooltips for new devices types: ND, HMR, IC.
  - Show device types in sorted order.
  - Update the default curve style for x and y readings.
  - Update dataviz style.

Version 1.9.10
--------------
2019-03-06

- PHANTASY core:
  - API: Return orm and orm all data from get_orm_for_one_corrector().
  - ENH: Add 'reset_wait' kw to get orm functions.
  - ENH: Add 'rate' and 'nshot' to get_orbit(), put wait after reset cor.
  - ENH: Support mask drfit by element name.

- Orbit Response Matrix:
  - BUG: Fix loaded settings cannot apply if mp is None.
  - ENH: Implement nshot and rate for trajectory DAQ.
  - ENH: Add daq_rate and daq_nshot keys in the saved ORM file.
  - FIX: Estimated time required for ORM measurement.
  - UI: Add daq_rate and daq_nshot spinbox.
  - UI: Add spinbox to set wait time for restoring set value.
  - ENH: Kepp all data and new function to calculate ORM with residuals from all data.
  - ENH: Add private var _orm_all_data to keep all data if keep_all is on.

Version 1.9.9
-------------
2019-03-01

- PHANTASY core:
  - Add 'ndigits' kw to Lattice.apply_setting(), get_orm_for_one_corrector()
  - Add CaElement.current_setting() to get current setpoint of defined field
  - Add limit_input function to phantasy namespace

- Trajectory Viewer:
  - Support load/save trajectory with intensity and phase.
  - Update UI with BPM intensity viz plot.
  - Add default mpl config for BPM intensity plot.
  - Add parameter 'filename' to apply_mpl_settings.
  - Add widget for BPM intensity viz.
  - Add a new toolbutton for show/hide ref trajectory.
  - Add a toolbutton to show/hide reference trajectory.
  - Support Save/Load monitors readings to/from file.
  - Show cached reference trajectories for X and Y.

- Wire Scanner App:
  - Update routine to fetch all PM devices.
  - Add configs for all PMs in LS1-FS1.

- Orbit Response Marix:
  - Update UI
  - Save/Load more information for ORM measurement.
  - Implement menu actions to save/load settings to/from file.
  - Add SettingsDataSheet for saving and loading settings.
  - Add spinbox to control ndigits for the settings to apply
  - Display settings with number format from apply precision.
  - Add kw 'fmt' to SettingsModel to format numbers.

- Correlation Visualizer:
  - Set 'Resume' back to 'Pause' when triggering Pause while scan is done.
  - Fix MPS status integration
  - Fix bug of clean up running thread while qthread is destroyed.

Version 1.9.8
-------------
2019-02-25

- PHANTASY core:
  - Bypass PV prefix option if pv name starts with '_#_'
  - Add a new method to CaElement: 'current_setting()', to return the current
    setpoint of regarding field of element
  - Add a new function 'get_orm_for_one_corrector()' to measure ORM just for
    one corrector
  - Add a new method 'apply_setting()' to Lattice for changing one corrector
    setting.

- Orbit Response Matrix App:
  - Stop action is supported when measuring ORM, or applying corrector
    settings to machine
  - Show estimated time required information for ORM measurement
  - Fix progressbar value issue
  - Popup settings view window before 'Apply', show all the settings regarding
    the correctors that will be changed
  - Include set limit for all correctors
  - Support Undo/Redo about the corrector settings, keeps 3 set of settings
  - Update UI

Version 1.9.7
-------------
2019-02-18

- PHANTASY core:
  - Lattice.correct_orbit: build two methods for get/set corrector settings
  from ORM, get_settings_from_orm and apply_settings_from_orm.

- Orbit Response Matrix App:
  - Add setting limits for correctors
  - Add 'corrector_field' and 'monitor_field' keys to ORMDataSheet

- App Launcher:
  - Add support to show logs

- Virtual Accelerator Launcher:
  - Fix timer segfault error

Version 1.9.6
-------------
2019-02-11

- App Launcher:
  - Add "Lattice Viewer" to the default config file
  - Add app icons and default icon

Version 1.9.5
-------------
2019-02-10

- App Launcher:
  - Re-designed UI
  - Support loading apps from config file

- Virtual Accelerator Launcher:
  - Known bug: sometimes app crashes due to segment fault

- Fix Python 2 and 3 compatibilities

Version 1.9.4
-------------
2019-02-05

- Orbit Response Matrix App:
  - New features: Open and Save ORM data sheet into JSON file
  - Support select all and inverse selection to the element list

- Trajectory Viewer:
  - Utilities: Add a signal: nElementSelected to ElementListModel

- Correlation Visualizer:
  - JSONDataSheet: do not sort the key when saving to JSON file

- plugins:
  - Update default log directory to $HOME/.phantasy_logs

Version 1.9.3
-------------
2019-02-05

- PHANTASY core:
  - Add keyword argument: 'mode' to Lattice.correct_orbit() to support
    non-interactive correction iteration, and improved the format for logging
    messages.

- Orbit Response Matrix App:
  - Update UI
  - Enhanced ORM measurement and orbit correction with ORM

- Lattice Viewer:
  - Update UI

- Trajectory Viewer:
  - Update UI

- plugins:
  - Change log directory to $HOME/phantasy_logs

Version 1.9.2
-------------
2019-02-04

- PHANTASY core:
  - Add keyword argument: 'msg_queue' to Lattice.correct_orbit() method and
    phantasy.get_orm() function, which supports the GUI widget to keep track
    of the logging messages generated from these two functions/methods.
  - API changes: change 'lattice' to be keyword argument for get_orm() function.

- Trajectory Viewer:
  - Update UIs
  - Implement monitors monitoring widget
  - Implement the generic element selections
  - Connection with ORM app

- Orbit Response Matrix App:
  - Update UIs
  - Implement ORM measurement
  - Implement orbit correction with ORM

- Virtual Accelerator Launcher:
  - Fix missing module
  - Update UIs

- App Launcher:
  - Update UIs

- Wire Scanner App:
  - Update UIs
  - Enhanced the figure controls buttons

- Correlation Visualizer:
  - Update UIs

Version 1.9.1
-------------
2019-01-27

- PHANTASY Apps:
  - Update icons
  - Install executables for Python 3 default
    - Install executables for Python 2 with suffix `_py2`
  - Update UIs

- Plugins:
  - Contex menu access point for physics apps

Version 1.9.0
-------------
2019-01-22

- Trajectory Viewer App:
  - Update app icon

- App Launcher App:
  - Release the first version
  - Support add new launcher entry by clicking '+' button

Version 1.8.9
-------------
2019-01-21

- Wire Scanner App:
  - Support parameter config: scan range, offsets, outlimit value
  - Update UI
  - dat2json always updates json filepath when dat filepath changed
  - update default device config file ws.ini.

Version 1.8.8
-------------
2019-01-18

- PHANTASY core:
  - Bug fixes: default unicorn policy u_policy should be set

- Wire Scanner App:
  - Bug fixes: U and V wire legend order
  - Add color to wire pos window shading buttons

- Quad Scan App:
  - Make 'powell' as the first fitting method option

Version 1.8.7
-------------
2019-01-18

- PHANTASY core:
  - CaElement: convert() to interpret value of field between PHY and ENG units.

Version 1.8.6
-------------
2019-01-17

- Quad Scan App:
  - Support both X and Y emittance calculation [see the below update of CV]
  - Update UI
  - Implement Autofill beam info button

- Correlation Visualizer App:
  - Add keyword argument 'ind' to ScanDataModel method to support select columns by index

Version 1.8.5
-------------
2019-01-17

- Wire Scanner App:
  - Bug fixes: one of the UI labels is typo
  - Display message on statusbar after changed device and synced data
  - Improved device working logic

Version 1.8.4
-------------
2019-01-17

- PHANTASY core:
  - CaField.tolerance: apply relative discrepancy, default 0.01

Version 1.8.3
-------------
2019-01-17

- Wire Scanner App:
  - Bug fix: the key name of small type data, should be 'fork1'
  - Add one more motor trigger routine when pulling out

- Correlation Visualizer App:
  - Bug fix: update scan routine with wire-scanner device

- PHANTASY core:
  - Add 'ensure_put' attr to CaField
  - Change the default field value ensure put tolerance to 0.2
  - Update docstrings

Version 1.8.2
-------------
2019-01-16

- Wire Scanner App:
  - Bug fixes: plot data after noise substraction not work
  - Update UI

- PHANTASY core:
  - Create new function 'ensure_put' to do ensure set operation
  - Add 'tolerance' attribute to CaField class
  - CaElement field setting apply ensure put policy

Version 1.8.1
-------------
2019-01-15

- Correlation Visualizer App:
  - Bug fixes: add sync data after device running is completed

- Wire Scanner App:
  - Bug fixes:
    - [Critical] Device move does not wait after triggered
    - Sync data key-field list wrong type

  - Changes:
    - Device operation timeout to 10s
    - Sync data after running device is completed
    - Update data to figure after syncing data in 'live' mode

- Settings Manager App:
  - Updated UI
  - Refactored module to load snapshot file

- PHANTASY core:
  - Default read policy return the first readback pv value if data type is not number

Version 1.8.0
-------------
2019-01-14

- Fix csv stream next() compatibility with Python 3
- Create a new app: Settings Manager

Version 1.7.2
-------------
2019-01-14

- Correlation Visualizer App:
  - Fix default MPS status PV name (FRIB)
  - Fix static element name in ElementWidget display, which introduces changes to phantasy core
  - [Testing] Add routine to process DAQ when device is wire-scanner

- Wire Scanner App:
  - Refactor sync results to IOC to the method of PMData

- Core of phantasy:
  - Add 'ename' as the alias of 'name' for BaseElement class

Version 1.7.1
-------------
2019-01-14

- Correlation Visualizer App:
  - Support scan against high-level elements
  - Unified APIs for PVElement(Readonly) and CaField
  - Updated UI
- Wire Scanner App:
  - Fix DAQ when working with real devices
  - Updated UI

Version 1.7.0
-------------
2019-01-11

- Wire Scanner App:
  - Support offine data analysis, load/save data
  - Configuration file management
  - Unified data interface
  - other features
- Bug fixes and improvement

Version 1.6.5
-------------
2019-01-02

- Implement data interface for wire-scanner app (testing)

Version 1.6.4
-------------
2018-11-10

- Correlation Visualizer App:
  - Array Set: Support sorting
  - Fix app crashes by None array

Version 1.6.3
-------------
2018-11-09

- FLAME VA: Add support for MPS status control
- VA Launcher App: Support MPS status simulation control
- Correlation Visualizer App: Support Pause scan by MPS
- Initial ORM app
- Other fixes

Version 1.6.2
-------------
2018-11-07

- FIX: Tests configuration files after re-introducing 'config' keyword
  argument to 'load_lattice' function.

Version 1.6.1
-------------
2018-11-06

- MNT: Bump up version to 1.6.1.
- MNT/CV: Bump up version to 2.2.
- ENH/CV: Array set dialog supports updating array by edit text.
- UI/CV: Array set dialog update, textEdit readonly off.
- STY: Clean up and reformat.
- UI/TV: Update frame background color.
- ENH/VA: Noise slider is synced when pv is changed externally.
- UI/VA: Set initial noise slider 0 and disable widgets.
- FIX: PV prefix for NOISE, CNT and CHARGE channels.
- ENH/VA: Implement CA localhost only option.
- UI/VA: Add checkbox to limit CA localhost only.
- ENH/VA: Implement PV prefix option of VA configuration.
- FIX: VA info crashes when switching VA.
- ENH: Update create lattice function to support pvprefix.
- ENH: Add 'prefix' key arg to MachinePortal for specified pv prefix.
- FIX: Do not prefix when prefix found from the orignal channels.
- ENH: flame VA support '--pv-prefix' to prefix channels with any string.
- ENH: Add '--pv-prefix' argument for flame-vastart.
- ENH/VA: Set PHANTASY_CONFIG_DIR if not set.
- ENH: Set PHANTASY_CONFIG_DIR for all apps if not set.
- MNT/VA: Bump up version to 1.1.
- ENH/VA: Add notebook templates for Notebook launch button.
- FIX/VA: Open ipynb file if existing.
- FIX: Make PHANTASY_CONFIG_DIR configurable during runtime.
- FIX/VA: Fix va info widget size.
- ENH/VA: Set up environment vars for va process.
- MNT: Add launcher and icon for VA launcher app.

Version 1.6.0
-------------
2018-11-02

- Correlation Visualizer App:
  - MNT/CV: Bump up version to 2.1.
  - UI/CV: Generate py file from ui with pyuic5 5.5.1.
  - UI/CV: Make plainText widget of Set array widget readonly.
  - UI/CV: Add chkbox to turn on/off arbitary alter array option.
  - ENH/CV: Support arbitary alter array input.
  - ENG/CV: Add implementation of extra monitors view.
  - UI/CV: Add widget for extra monitors view.
  - ENH/CV: Change delimiter to tab when saving data into csv.
  - ENH/CV: Clear the startup template curve.
  - ENH/CV: Save extra monitor data into csv table.
  - ENH/CV: Return all avg and stderr array from ScanDataModel.
  - ENH/CV: Record readings of extra monitors to scan task.
  - UI/CV: Update widgets for extra monitors.
  - ENH/CV: Implement the logic to add extra monitors.
  - ENH/CV: Add method to remove extra monitor from scan task.
  - UI/CV: Fix view_selected_pts_tbtn popup mode.
  - MNT/CV: Clean import section and manage icon size by macro.
  - UI/CV: Add text label for all tool buttons.
  - ENH/CV: Implement view_selected_pts_tbtn for RETAKE.
  - UI/CV: Add icon for show retake points tool button.
  - UI/CV: Make scan event log font bold.
  - ENH/CV: Implement RETAKE feature.
  - FIX: Include the end valule of arange when building a array.
  - FIX: Not disable element selection mode when PV mode is enabled.
  - FIX: When lattice is loaded, but not shown in elem selection widget.
  - FIX: PV connection should be checked by PV.connected attr.
  - ENH: Add keyboard shortcut ESC to close points viewer.
  - ENH: Note on_select_points slot which accepts ind,pts from lasso tool.
  - ENH: Update event log for button clicking.
  - ENH: Add color: COLOR_PRIMARY, for button clicking event log.
  - ENH: Implement update button for points viewer widget.
  - UI: Add Update button for tableWidget refreshing.
  - UI: Set buttons autodefault.
  - ENH: Adjust points view widget size.
  - ENH: Use delete toolbutton to delete selected point.
  - UI: Auto fit tableWidget size regarding contents.
  - UI: Update tab order.
  - ENH: Points for retaking could be visually selected/deselected.
  - ENH: Add widget for viewing selected points for RETAKE.
  - BUG: Fix get_save_filename crashes when nothing is selected.
  - ENH: Add 'index_array' to ScanWorker to support RETAKE.
  - BUG: Fix issues that crash app when click buttons when no scan is running.

- VA Launcher App:
  - UI/VA: Update window size.
  - ENH/VA: Make toolbuttons size as 32x32.
  - ENH/VA: Update icons for notebook and va info button.
  - UI/VA: Add widget for va info.
  - UI/VA: Update layout.
  - UI/VA: Add icon for va info btn.
  - UI/VA: Add icons for notebook run/stop.
  - ENH/VA: Implement toolbar for run/stop VA.
  - UI/VA: Update layout and use toolbar for run/stop VA.
  - FIX/VA: Capture process stop exception when shown va info.
  - ENH/VA: Add icons for run/stop toolbutton.
  - UI/VA: Add slot for clicking Notebook button.
  - ENH/VA: Add app icon for VA launcher.
  - MNT/VA: Bump up version to 1.0.
  - MNT/VA: Update about info.
  - ENH/VA: Implement noise level slider.
  - ENH/VA: Add ESC keyshort to exit vainfo widget.
  - UI/VA: Add slider to contorl VA noise level.
  - ENH/VA: New module for va info widget.
  - ENH/VA: Add more tools buttons, enhanced start/stop logic.
  - UI/VA: Update layout.
  - ENH: Add function to convert seconds to uptime string.
  - UI/VA: Update layout.
  - ENH/VA: Implement RUN and STOP button.
  - ENH: Changed moveto and set toolbutton to make use of cross-ruler.
  - MNT: Add entry point for va_launcher.
  - ENH/VA: Initial virtual accelerator launcher app.

Version 1.5.0
-------------
2018-10-23

- Correlation Visualizer 2.0:
  - Run scan work on another thread
  - Support Pause and Resume
  - Improved scan event log system
  - Improved element selection
  - Improved scan range setting
  - Features more tool buttons
  - Bugs fixed

Version 1.4.4
-------------
2018-10-19

- Applied improvements to GUI apps.
- Fixed bugs.

Version 1.4.0
-------------
2018-10-12 [Testing]

- First release for GUI apps:
  - Quad scan
  - Correlation Visualizer
- Initiate data sheet for output data
- Testing wire-scanner device class

Version 1.3.0
-------------
2018-09-26 [Testing]

- Initial a new app: 'Correlation Visualizer'
- Enhanced 'Trajectory Viewer' app with version of 1.1
  - Apply default figure style settings at start up
- Enhanced orbit correction with ORM
  - Create a new function: 'get_index_grid' to get sub matrix from ORM
- Fix matplotlib issues regarding to 1.x and 2.x incompatibilities

Version 1.2.0
-------------
2018-09-14 [Testing]

- New PyQt5 with Python 3.x apps:
  - Trajectory Viewer: first release, with system menu item
  - Lattice Viewer: initiated, WIP
- Add generated HTML documentation into source branch

Version 1.0.7
-------------
2018-08-17 [Testing]

- Python 3 compatibilities:
  - Convert dict.keys() and dict.items() to list
  - Write file with 'w' option
- Virtual accelerator (FLAME):
  - FIX: add back BPM energy field
  - ENH: add new option '-l' to `flame-vastart` to run IOC localhost only

Version 1.0.6
-------------
2018-08-16 [Testing]

- Fix the compatibility issue regarding to the unicorn data
  - For old unicorn data: xydata columns indices are 4 and 5.

Version 1.0.5
-------------
2018-08-15 [Testing]

- `unicorn_app`:
  - Add button 'Start with Browser' to 'Advance' tab
  - Add `Help` menu action

Version 1.0.4
-------------
2018-08-10 [Testing]

- Add menu entry for `unicorn_app`

Version 1.0.3
-------------
2018-08-10 [Testing]

- `unicorn_app`:
  - Default page zoom set to 100%
  - Add an icon
  - Update the about information
  - Automatic start UNICORN web service locally at random port
    between 5000-5050, and terminate at exiting
  - Add a new tab 'Advance' to Preferences for residue services clean up

Version 1.0.2
-------------
2018-08-09 [Testing]

- `unicorn_app`:
  - FIX: Always override unicorn.sqlite file
  - UI: Rename `srv_data_btn` to `srv_db_reset_btn`

Version 1.0.1
-------------
2018-08-09 [Testing]

- ENH: Add new button to initialize UNICORN SQLite data
- ENH: UI

Version 1.0.0
-------------
2018-08-09 [Testing]

- CI: Automatically test and build documentation (HTML and pdf)
- DOC: Major update
- ENH: Add new GUI app: `unicorn_app` (Python 2), `unicorn_app3` (Python 3)

Version 0.9.14
--------------
2018-07-31 [Testing]

- FIX: `lat.get_model_settings` skip element if not in current working lattice

Version 0.9.13
-------------
2018-07-26 [Testing]

- ENH: Set 'handle' with default value.
- ENH: Add 'timeout' to CaField.get() for const.

Version 0.9.12
-------------
2018-07-25 [Testing]

- ENH,API: More feature to the `CaField.get()`.
- ENH: New functions for get value from PV.

Version 0.9.11
-------------
2018-07-25 [Testing]

- PY3: Fix dict keys() compatibility.

Version 0.9.10
-------------
2018-07-25 [Testing]

- ENH:
  - `MachinePortal` instance mark the current working lattice with `*`
  - `CaField.get`: new option to return timestamp
  - Add support to model FC and BCM
  - Add `--soffset` option to `frib-channels` tool
- BUG:
  - Ensure parsed tag as list type
- Changes:
  - Remove energy field from BPM element

Version 0.9.9
-------------
2018-07-18 [Testing]

- Add command `test_phantasy` for testing
- Use `entry_points` rather than `scripts`
- Fix issue of not cleaning up after testing
- Fix issue of write permission when testing

Version 0.9.8
-------------
2018-07-17 [Testing]

- Fix Python 3.x compatibilities for Debian packaging
- Sort out the install-depends for `pip`
- Add tests folder into package

Version 0.9.7
-------------
2018-07-06 [Testing]

- Now support both Python 2.7 and Python 3.x
- Unittest can be ran by `python setup.py test`
- Bugs fixed

Version 0.9.6
-------------
2018-07-02 [Testing]

- MNT: Remove README.rst and update README.md.
- ENH: Add method 'get_model_settings' to Lattice.

Version 0.9.5
-------------
2018-06-29 [Testing]

- ENH: Rename machine example to demo_mconfig/accel.
- ENH: Install demo mach into /etc/phantasy/config.
- ENH: Make example machine config usage conditional.
- ENH: Make scan module optional.
- ENH: Make channelfinder module optional.
- FIX: Logging level issue an typo.
- FIX: Change the data path for tests.

Version 0.9.4
-------------
2018-05-23 [Testing]

- DOC: Add entries for new notebook files.
- DOC: Add notebooks.
- ENH: Add plot_orbit tool to work with FLAME model.
- ENH: Add option 'flame_cor_gauge' to corrector.
- ENH: Generate settings with physics field values.
- ENH: Add _unicorn_e2p and _unicorn_p2e to Element.
- ENH: Add methods to test field type.
- FIX: CaField duplicated PV objects.
- FIX: CaField duplicated PV names.
- ENH: Add ftype (field type) attribute to CaField.

Version 0.9.3
-------------
2018-05-15 [Testing]

- MNT: Remove files regarding to Travis CI.
- FIX: pv_policy is a str when passing to process_pv.
- TST: Adapt the tests regarding to phantasy source.
- FIX: Use physics fields for BPM element.
- ENH: Generate settings from physics fields.
- ENH: Update VA settings from physics fields.
- ENH: Read settings from physics fields.
- ENH: Seperate into ENG and PHY fields for channels.
- FIX: If 'unicorn_file' is missing, use default law.
- FIX: Get channels according to 'elemField_eng'.
- FIX: Get unicorn functions with element name.
- ENH: Integrate unicorn policy when processing PVs.
- ENH: Update routine to integrate physics field.
- NEW: Replace elemField with elemField_eng[_phy].
- ENH: Add physics field names for each elements.
- ENH: Update 'process_pv' for element generation.
- ENH: Support 'unicorn_file' when loading lattice.
- ENH: Add unicorn decorators into package.
- ENH: decorators for pv_policy with scaling laws.

Version 0.9.2
-------------
2018-05-02 [Testing]

- FIX: Update BPM field PVs according to FRIB setup.
- ENH: Add MAG dynamic field for BPM.
- CI: Set up Circle CI.

Version 0.9.1
-------------
2018-05-01 [Testing]

- ENH: Rename x(y) -> x(y)cen and add cxy for PM.
- ENH: Add xy correlation for profile monitor.
- ENH: Update profile monitor pv names.
- DOC: Attach pdf doc.
- ENH: Support XLS lattice file dated 2018-01-25.

Version 0.9.0
-------------
2018-04-09 [Testing]

- DOC: Update index page.
- DOC: Add work_with_save_restore notebook.
- Fix caget large waveform record issue.
- ENH: Add snapshot-settings to phytool.
- ENH: Add new cmd 'snapshot-settings' to read .snp.
- ENH: Add support to read settings from snp file.
- Add support to load settings into Lattice.
- Default design/last settings: {field: None}.
- Initialize elem design_settings from settings file.
- Add keyword arguments to pv policy functions.
- Add tests for lattice load_settings.
- Add design_settings and last_settings attribute.
- Initialize design settings for all elements.
- Enable try except block.
- Fix compatibility with Python 3.
- Show warning message if wait flag is True when set.
- Set wait as default True and add ename for CaField.
- Add attributes to control put action of CaField.
- Add keyword arguments to all policy functions.
- Add set_loglevel to control level of log system.
- Add sphinx_rtd_theme as deps.
- Use rtd theme.

Version 0.8.1
-------------
2018-03-27 [Testing]

- Fix: get field from 'control' environment.

Version 0.8.0
-------------
2018-03-27 [Testing]

- New:
    - len() method for high-level lattice
    - Logging message level control
    - Property: `pvPolicy` for channels
    - CaField: new methods: `reset_policy`
    - CaField: update element to support multi-PVs for one handle
    - CaField: new attributes: `read_policy`/`write_policy`
    - Module for PV policy: `DEFAULT`, `EQUAD`, `EBEND`

- Update:
    - Implement all element config into `apply_config` method
    - Replace append with insert operation for high-level lattice class
    - Make repr of lattice more fast
    - Default `cfs_property_name` changed to be `*`
    - CaField: get() will return list instead of scalar

- Tools:
    - frib_channels: new option `--pspvfile` to generate PS channels based on given pspvfile.

- CI:
    - New docker image (tonyzhang/phantasy-ioc) as a soft-ioc container for PV testing
    - set random noise to 0 by PV: 'fac'
    - Add new deps
    - Makefile rule to start/stop phantasy-ioc container

- Config:
    - Update LEBT configuration with new channels

Test:
    - New test for generating layout from xlsx file
    - New test for CaElement/CaField
    - New test data

Clean:
    - Remove debian directory from source branch
    - Unused functions

Version 0.7.7
-------------
2018-03-16 [Testing]

- Fix: PM type
- Fix: default machine configurations
- New: way to control logging message display level


Version 0.7.6
-------------
2018-03-15 [Testing]

- New:
  - New elements: SlitElement, ApertureElement, AttenuatorElement, DumpElement, ChopperElement
  - Drift has specific names, rule: `SYSTEM_SUBSYSTEM:DEVICE_DFT_D####_#`
- Fixed:
  - Apply effective length when switching subsystem
  - Center position when shrinking/expanding element
- Updated:
  - Virtual accelerator
  - Channel/layout generation
- Changed:
  - All features provided by 'flameutils' module is imported from another external Python package: `flame_utils`
  - Unittests for flameutils have been deleted


Version 0.7.2-0.7.5
-------------
2018-02-27 [Testing]

- Fix channel names
- Add LEBT tag to machine configuration
- Support effective length for solenoid and equad


Version 0.7.1
-------------
2017-12-21 [Testing]

- Update default machine configurations


Version 0.7.0
-------------
2017-10-27 [Testing]

- Fix bugs.
- New changes to generate machine configuration for real FRIB LINAC.
- New moduel for default machine configuration within package.
- New support for 'Generic' type cavity [FLAME].
- New configurable feature to mask device as drift.


Version 0.6.0
-------------
2017-05-31 [Testing]

- Fix docstrings after API changes.
- Fix FLAME settings for sextupole element.
- Fix 'fields' is attribute instead of method now.
- New physics module: orm for orbit correction.
- New attribute 'orm', correct orbit by orm method.
- Fix bugs.


Version 0.5.1
-------------
2017-05-24 [Testing]

- New put() and get() for CaField.
- New Unitests for element/lattice,machine config.
- New Refactor methods from MachinePortal.
- New Keyword 'pv_data' for element initialization.
- New Keyword 'sort' to create_lattice.
- Fix Compatibility.
- Fix 'simplify_data' supports single PV record.
- New CFS fields: *physicsName* and *physicsType*.
- Refactor CaElement.
- Refactor element module with CA support.
- API changed:
  - CaElement: fields() -> fields


Version 0.4.0
-------------
2017-05-08 [Testing]

- Support sextupole modeling in FLAME VA.
- Fix PM incorrect field values for XY and XYRMS.


Version 0.3.0
-------------
2017-04-18 [Testing]

- Support wire-scanner modeling and data analysis.
- Application utilities are included in 'phantasy.apps',
however provided by another package called 'python-phantasy-apps'.


Version 0.2.0
-------------
2017-02-22 [Testing]

- Support modeling LEBT segment of front-end of FRIB linac.
- New configurations from "FRIB_FE", which is in "machines" repo.


Version 0.1.0
-------------
2017-02-03 [Testing]

- New package name, `PHANTASY`: Physics High-level Applications and Toolkits for Accelerator System.
- Refactoring the codebase of previously known as `phyhlc` and `phyapps`.
- Uniformed PV channel data source:
  - Uniformed interface provided by `phantasy.pv.DataSource`;
  - Support source types: `CFS`, `SQLite`, `CSV`
  - New version of tool: `cfutil-export` could be used to convert data source
    between any two of these types.
- Update of options of machine configuration file: `phyutil.ini`:
  - Created new modules to build facility-specific configuration file, in
    `phantasy.facility` subpackage, `phyutil.ini` can also be any other names;
  - Option names changed:
    - `submachines` -> `segments`
    - `default_submachine` -> `default_segment`
    - `output_dir` -> `root_data_dir` (directory structure of all the data may
    generated from phantasy is re-organized, now this option does not support
    setting from environment variable.)
  - New option names:
    - `model_data_dir`: directory for model data
    - `cfs_property_names`: Unix shell pattern of property names to get from CFS
- Redefined package/module import rules:
  - Now after `import phantasy`, everything could be reached by `phantasy`;
  - Import different library as standalone namespace, by `from phantasy import
  <lib-name>`, then get regarding classes/funcs by within the namespace of
  `<lib-name>`.
- Created more funcs/classes for the `operation` library, which now can handle
  more high-level lattice related machine tunning tasks, e.g.:
  - Synchronize devices` settings between model (code) and machine (control);
  - Export lattice file directly from high-level lattice, let users to study
    the lattice file, then high-level lattice can take back into the final
    lattice file as new settings to update machine.
  - Roll back to certain set history now is supported.
- Established general interface between machine and physics modeling ecosystem,
  arbitary manipulation is allowed at the model-based tunning stage.
- Scan client is now inherited from ScanClient of scan module
  - Created new datautil to handle data generated from Scan clients.
- Added more scripts (most likely could be found in `phytool`):
  - cfs_start: start channel finder service
  - cfs_stop: stop channel finder service
  - cfs_empty_index: empty index of channel finder service data
  - cfs_build_index: rebuild index of channel finder service data
  - plot_orbit: plot particle orbit from FLAME lattice file
  - correct_orbit: correct beam orbit in a pretty easy way (FLAME lattice file)
- Fixed bugs
- Added docstrings for legacy code
- Added unittests
- Added demo scripts and jupyter notebooks
- Published documentation at https://controls.frib.msu.edu/phantasy/
